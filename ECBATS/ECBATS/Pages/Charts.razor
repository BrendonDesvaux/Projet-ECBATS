@page "/charts"
@using System.Globalization

@inject ProductServices service

    <input type="checkbox" id="switcher_checkbox" class="switcher_checkbox" />
    <div class="wrapper">
        <button class="switcher">
            <div class="switcher_circle"></div>
            <label for="switcher_checkbox" class="switcher_checkbox_label"></label>
        </button>

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link night active" href=" ">Crytocurrencies</a>
            </li>
            <li class="nav-item">
                <a class="nav-link night active" href="Charts">Charts</a>
            </li>
        </ul>
        <div class="container">
            <div class="row">
                <div class="col-sm-12 my-5">
                    <h1>"Nom de la crypto cliqu√©e"'s chart</h1>
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Name</th>
                                <th scope="col">Logo</th>
                                <th scope="col">Price</th>
                                <th scope="col">24h%</th>
                                <th scope="col">7j%</th>
                            </tr>
                        </thead>
                        <tbody>

                            <tr>
                                <td><input type="checkbox" class="option-input checkbox" /></td>
                                <td>Symbol</td>
                                <td>product.CryptoName</td>
                                <td>product.Price</td>
                                <td>product.Percent24h</td>
                                <td>product.Percent7j</td>
                            </tr>
                            
                            <tr><td colspan="6"><strong>No products available</strong></td></tr>
                            
                        </tbody>
                    </table>
                    <RadzenChart>
                        <RadzenLineSeries Smooth="@smooth" Data="@revenue2019" CategoryProperty="Date" Title="2019" LineType="LineType.Dashed" ValueProperty="Revenue">
                            <RadzenMarkers MarkerType="MarkerType.Square" />
                        </RadzenLineSeries>
                        <RadzenLineSeries Smooth="@smooth" Data="@revenue2020" CategoryProperty="Date" Title="2020" ValueProperty="Revenue">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                        <RadzenValueAxis Formatter="@FormatAsUSD">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Revenue in USD" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div>
        @code {
            bool smooth = false;
            class DataItem
            {
                public DateTime Date { get; set; }
                public double Revenue { get; set; }
            }

            string FormatAsUSD(object value)
            {
                return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
            }

            DataItem[] revenue2019 = new DataItem[] {
        new DataItem
        {
            Date = DateTime.Parse("2019-01-01"),
            Revenue = 234000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-02-01"),
            Revenue = 269000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-03-01"),
            Revenue = 233000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-04-01"),
            Revenue = 244000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-05-01"),
            Revenue = 214000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-06-01"),
            Revenue = 253000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-07-01"),
            Revenue = 274000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-08-01"),
            Revenue = 284000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-09-01"),
            Revenue = 273000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-10-01"),
            Revenue = 282000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-11-01"),
            Revenue = 289000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-12-01"),
            Revenue = 294000
        }
    };

            DataItem[] revenue2020 = new DataItem[] {
        new DataItem
        {
            Date = DateTime.Parse("2019-01-01"),
            Revenue = 334000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-02-01"),
            Revenue = 369000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-03-01"),
            Revenue = 333000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-04-01"),
            Revenue = 344000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-05-01"),
            Revenue = 314000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-06-01"),
            Revenue = 353000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-07-01"),
            Revenue = 374000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-08-01"),
            Revenue = 384000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-09-01"),
            Revenue = 373000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-10-01"),
            Revenue = 382000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-11-01"),
            Revenue = 389000
        },
        new DataItem
        {
            Date = DateTime.Parse("2019-12-01"),
            Revenue = 394000
        }
    };
        }
        @code{
            List<CryptoSaving> Products = new List<CryptoSaving>();
            protected override async Task OnInitializedAsync()
            {
                await RefreshProducts();
            }

            private async Task RefreshProducts()
            {
                Products = await service.GetProductAsync();
            }

            public CryptoSaving NewProduct { get; set; } = new CryptoSaving();
            private async Task AddNewProduct()
            {
                await service.AddProductAsync(NewProduct);
                NewProduct = new CryptoSaving();
                await RefreshProducts();
            }

            CryptoSaving UpdateProduct = new CryptoSaving();
            private void SetProductForUpdate(CryptoSaving product)
            {
                UpdateProduct = product;
            }

            private async Task UpdateProductData()
            {
                await service.UpdateProductAsync(UpdateProduct);
                await RefreshProducts();
            }

            private async Task DeleteProduct(CryptoSaving product)
            {
                await service.DeleteProductAsync(product);
                await RefreshProducts();
            }
        }
        
</div>
