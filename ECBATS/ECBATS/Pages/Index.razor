@page "/"


@inject ProductServices service

<input type="checkbox" id="switcher_checkbox" class="switcher_checkbox" />
<div class="wrapper">
    <button class="switcher">
        <div class="switcher_circle"></div>
        <label for="switcher_checkbox" class="switcher_checkbox_label"></label>
    </button>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link night active" href=" ">Crytocurrencies</a>
        </li>
        <li class="nav-item">
            <a class="nav-link night active" href="Line-chart">Charts</a>
        </li>
    </ul>

    <div class="container double ">
        <div class="col-md-8 shadow p-3 mb-5 bg-white rounded best">
            <h3>Best favorites</h3>
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Name</th>
                            <th scope="col">Logo</th>
                            <th scope="col">Price</th>
                            <th scope="col">24h%</th>
                            <th scope="col">7J%</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Products.Any())
                        {
                            @foreach (var product in Products)
                            {
                                <tr @onclick="(() => SetProductForUpdate(product))">
                                    <td>@product.ID</td>
                                    <td>@product.CryptoName</td>
                                    <td>@product.Price</td>
                                    <td>@product.Symbol</td>
                                    <td>@product.Percent24h</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="6"><strong>No products available</strong></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="cold-md-3 favs shadow p-3 mb-5 bg-white rounded">
            <h3>Favorites</h3>
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Name</th>
                            <th scope="col">Logo</th>
                            <th scope="col">Price</th>
                            <th scope="col">24h%</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Products.Any())
                        {
                            @foreach (var product in Products)
                            {
                                <tr @onclick="(() => SetProductForUpdate(product))">
                                    <td>@product.ID</td>
                                    <td>@product.CryptoName</td>
                                    <td>@product.Price</td>
                                    <td>@product.Symbol</td>
                                    <td>@product.Percent24h</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="6"><strong>No products available</strong></td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <hr />

    <div class="container simple shadow p-3 mb-5 bg-white rounded">
        <div class="col-md-12 allCur">
            <div class="col-md-9">
                <h3>All currencies</h3>
            </div>
            <div class="col-md-3" style="padding: 1%;">
                <div class="form-outline">
                    <input type="search" id="form1" class="form-control" placeholder="Type query"
                           aria-label="Search" />
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Name</th>
                        <th scope="col">Logo</th>
                        <th scope="col">Price</th>
                        <th scope="col">24h%</th>
                    </tr>
                </thead>
                <tbody class="allcurtable">
                    @if (Products.Any())
                    {
                        @foreach (var product in Products)
                        {
                            <tr @onclick="(() => SetProductForUpdate(product))">
                                <td>@product.ID</td>
                                <td>@product.CryptoName</td>
                                <td>@product.Price</td>
                                <td>@product.Symbol</td>
                                <td>@product.Percent24h</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="6"><strong>No products available</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    List<Product> Products = new List<Product>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
    }

    private async Task RefreshProducts()
    {
        Products = await service.GetProductAsync();
    }

    public Product NewProduct { get; set; } = new Product();
    private async Task AddNewProduct()
    {
        await service.AddProductAsync(NewProduct);
        NewProduct = new Product();
        await RefreshProducts();
    }

    Product UpdateProduct = new Product();
    private void SetProductForUpdate(Product product)
    {
        UpdateProduct = product;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateProductAsync(UpdateProduct);
        await RefreshProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        await service.DeleteProductAsync(product);
        await RefreshProducts();
    }
}
