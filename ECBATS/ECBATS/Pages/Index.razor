@page "/"


@inject ProductServices service

<input type="checkbox" id="switcher_checkbox" class="switcher_checkbox" />
<div class="wrapper">
    <button class="switcher">
        <div class="switcher_circle"></div>
        <label for="switcher_checkbox" class="switcher_checkbox_label"></label>
    </button>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link night active" href=" ">Crytocurrencies</a>
        </li>
        <li class="nav-item">
            <a class="nav-link night active" href="Charts">Charts</a>
        </li>
    </ul>
    <h3 class="revert">Powered by <a href="https://www.coingecko.com/fr">CoinGecko</a></h3>
    <div class="container simple shadow p-3 mb-4 bg-white rounded">
        <div class="col-md-12 allCur">
            
                <h3>All currencies</h3>
        </div>
        <div class="col-md-12">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Fav</th>
                        <th scope="col">Logo</th>
                        <th scope="col">Name</th>
                        <th scope="col">Symbol</th>
                        <th scope="col">Price</th>
                        <th scope="col">24h%</th>
                        <th scope="col">7j%</th>
                    </tr>
                </thead>
                <tbody class="allcurtable">
               
                    @if (Products.Any())
                    {
                        @foreach (var product in Products)
                        {
                            <tr @onclick="(() => SetProductForUpdate(product))">
                                <td><input type="checkbox" id="name" @bind-value=name class="option-input checkbox" /></td>
                                <td><img src="@product.Image" id="CryptoImage"></td>
                                <td>@product.Symbol</td>
                                <td>@product.CryptoName</td>
                                <td>@product.Price €</td>
                                <td>@product.Percent24h %</td>
                                <td>@product.Percent7j.Remove(product.Percent7j.Length - 1, 1) %</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="6"><strong>No products available</strong></td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public bool name { get; set; }
    List<CryptoSaving> Products = new List<CryptoSaving>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
    }

    private async Task RefreshProducts()
    {
        Products = await service.GetProductAsync();
    }

    public CryptoSaving NewProduct { get; set; } = new CryptoSaving();
    private async Task AddNewProduct()
    {
        await service.AddProductAsync(NewProduct);
        NewProduct = new CryptoSaving();
        await RefreshProducts();
    }

    CryptoSaving UpdateProduct = new CryptoSaving();
    private void SetProductForUpdate(CryptoSaving product)
    {
        UpdateProduct = product;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateProductAsync(UpdateProduct);
        await RefreshProducts();
    }

    private async Task DeleteProduct(CryptoSaving product)
    {
        await service.DeleteProductAsync(product);
        await RefreshProducts();
    }
}